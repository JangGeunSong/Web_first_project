{"version":3,"sources":["logo.svg","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenres","_ref3","genres","Movie","_ref","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","movies","page","loading","prevY","_renderMovies","_this","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","setState","_callApi","sent","stop","this","fetch","then","response","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8PC8BxC,SAASC,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,iBAI1D,SAASC,EAATC,GAA+B,IAATC,EAASD,EAATC,OAClB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,EAAhC,KAoBOC,MArDf,SAAAC,GAAkD,IAAlCN,EAAkCM,EAAlCN,MAAON,EAA2BY,EAA3BZ,OAAQU,EAAmBE,EAAnBF,OAAQG,EAAWD,EAAXC,SACnC,OACIX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACVG,EAAOI,IAAI,SAACJ,EAAQK,GAAT,OAAmBb,EAAAC,EAAAC,cAACI,EAAD,CAAaE,OAAQA,EAAQM,IAAKD,OAErEb,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBACbL,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACIe,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC2CbC,6MAxDbC,MAAQ,CACNC,OAAQ,GACRC,KAAM,EACNC,SAAS,EACTC,MAAM,KAYRC,cAAgB,WAUd,OATeC,EAAKN,MAAMC,OAAOX,IAAI,SAAAiB,GACnC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,CACP1B,MAAOyB,EAAME,cACbjC,OAAQ+B,EAAMG,mBACdlB,IAAKe,EAAMI,GACXzB,OAAQqB,EAAMrB,OACdG,SAAUkB,EAAMlB,gBAMpBuB,gCAAa,SAAAC,IAAA,IAAAZ,EAAA,OAAAa,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXZ,EAAKa,SAAS,CAAChB,SAAS,IADba,EAAAE,KAAA,EAEUZ,EAAKc,WAFf,OAELnB,EAFKe,EAAAK,KAGXf,EAAKa,SAAS,CACZlB,WAJS,wBAAAe,EAAAM,SAAAT,EAAAU,WASbH,SAAW,WACT,OAAOI,MAAM,yDACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAK3B,SACvB4B,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAjC1BP,KAAKX,8CAqCE,IACCX,EAAWsB,KAAKvB,MAAhBC,OACR,OACEvB,EAAAC,EAAAC,cAAA,OAAKG,UAAWkB,EAAS,MAAQ,eAC9BA,EAASsB,KAAKlB,gBAAkB,kBAtDvB4B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.91b80c72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie_Columns\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie_Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie_Genres\">\r\n                    {genres.map((genres, index) => <MovieGenres genres={genres} key={index} />)}\r\n                </div>\r\n                <p className=\"Movie_Synopsis\">\r\n                <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                />\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}) {\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\"/>\r\n    )\r\n}\r\n\r\nfunction MovieGenres({genres}) {\r\n    return (\r\n        <span className=\"Movie_Genres\">{genres} </span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    genres : PropTypes.array.isRequired,\r\n    synopsis : PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster : PropTypes.string.isRequired,\r\n    alt : PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenres.propTypes = {\r\n    genres : PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n  // Render: componentWillMount() -> render() -> componentDidMount()\n  // update: componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillMount() -> redner() -> compnentDidMount()\n\n  state = {\n    movies: [],\n    page: 0,\n    loading: false,\n    prevY:0\n    // And now we empty state on the web infomation.\n  }\n\n  componentDidMount() {\n    this._getMovies();\n  }\n       // It must be same alphabet on the states name Must be!!!\n       // This method how instagram and facebook show the new picture and feed on the scrolling the application. That called the infinite scrolling.\n\n\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie \n      title={movie.title_english}\n      poster={movie.medium_cover_image}\n      key={movie.id}\n      genres={movie.genres}\n      synopsis={movie.synopsis}\n      />\n    })\n    return movies\n  }\n\n  _getMovies = async () => {\n    this.setState({loading: true});\n    const movies = await this._callApi()\n    this.setState({\n      movies\n      // movies : movies ==> same as upper code\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n    //fetch and .then + .catch use the promise the ajax use method\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App-loading\"}>\n        {movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n//_ is use to make differnce to API and my defined functions.\nexport default App;\n\n\n/*\nsetTimeout(() => { // same as [function () {}]\n      this.setState({\n        greeting : \"Hello user!\",\n        movies: [\n          //...this.state.Movies, // If without this, all movie info that exist before has replace the bottom elem\n          {\n            title: \"First Man\",\n            poster: \"https://i.etsystatic.com/10683147/r/il/aea8ba/1609378563/il_570xN.1609378563_f8r5.jpg\"\n          },\n          {\n            title: \"Jurassic Park\",\n            poster: \"http://www.jurassicworld.com/sites/default/files/2016-08/jp_cover.jpg\"\n          },\n          {\n            title: \"The Dark Knight\",\n            poster: \"https://is2-ssl.mzstatic.com/image/thumb/Video118/v4/3e/54/c8/3e54c80d-7d7d-5786-0ac9-aca4bafadfda/contsched.jsirdfmq.lsr/268x0w.jpg\"\n          },\n          {\n            title: \"Avengers\",\n            poster: \"https://m.media-amazon.com/images/M/MV5BNDYxNjQyMjAtNTdiOS00NGYwLWFmNTAtNThmYjU5ZGI2YTI1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_UX182_CR0,0,182,268_AL_.jpg\"\n          }\n         // If up to this comp then the movie info update to the top\n        ]\n      })\n    }, 5000)\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}